extend type Query {
    getOrderFromToken(
        token: String! @eq
        reseller_id: ID
    ): Order @find
}

extend type Query @guard(with: ["sanctum"]) {
    listOrder(
        hasReseller: _ @whereHasConditions(columnsEnum: OrderResellerWhereColumn)
    ): [Order]!
        @can(ability: "viewAny" model: "MayIFit\\Extension\\Shop\\Models\\Order") 
        @paginate(type: "paginator")

    viewOrder(
        id: ID! @eq
    ): Order! 
        @can(ability: "view" find: "id") 
        @find
}

extend type Mutation {
    createOrder(input: CreateOrderInput! @spread): Order 
        @create
}

extend type Mutation @guard(with: ["sanctum"]) {
    updateOrder(input: UpdateOrderInput! @spread): Order 
        @can(ability: "update" find: "id") 
        @update

    deleteOrder(id: ID! @rules(apply: ["required"])): Order 
        @can(ability: "delete" find: "id") 
        @delete

    updateOrderProductPivot(input: UpdateOrderProductPivotInput! @spread): OrderProductPivot
        @can(ability: "update" find: "id") 
        @update
}

input CreateOrderInput {
    extra_information: String
    currency: String!
    payment_type: String!
    delivery_type: Int!
    bank_account_no: String
    transport_cost: Float
}

input UpdateOrderInput {
    id: ID!
    token: String
    discount_percentage: Float
    extra_information: String
    paid: Boolean
    currency: String
    payment_type: String
    delivery_type: Int
    bank_account_no: String
    transport_cost: Float
}

type Order @modelClass(class: "MayIFit\\Extension\\Shop\\Models\\Order") {
    id: ID!
    token: String!
    placed: DateTime!
    quantity: Int!
    net_value: Float!
    gross_value: Float!
    currency: String!
    discount_percentage: Float
    extra_information: String
    paid: Boolean!
    payment_type: String!
    delivery_type: Int!
    bank_account_no: String
    order_id_prefix: String
    items_sent: Int!
    transport_cost: Float
    sent_to_courier_service: DateTime
}

"A list of filterable columns."
enum OrderResellerWhereColumn {
    TOKEN @enum(value: "token")
    ORDER_ID_PREFIX @enum(value: "order_id_prefix")
    COMPANY_NAME @enum(value: "company_name")
    NET_VALUE @enum(value: "net_value")
    GROSS_VALUE @enum(value: "gross_value")
}