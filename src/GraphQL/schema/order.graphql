extend type Query {
    getOrderFromToken(
        token: String!
        currency: String!
        dateTime: DateTime!
    ): Order @field(resolver: "GetOrderFromToken@resolve")
}

extend type Query @guard(with: ["sanctum"]) {
    listOrder(
        token: String @eq
    ): [Order]!
        @can(ability: "viewAny" model: "MayIFit\\Extension\\Shop\\Models\\Order") 
        @paginate(type: "paginator")

    viewOrder(
        id: ID! @eq
    ): Order! 
        @can(ability: "view" find: "id") 
        @find
}

extend type Mutation {
    createOrder(input: CreateOrderInput! @spread): Order 
        @create
}

extend type Mutation @guard(with: ["sanctum"]) {
    updateOrder(input: UpdateOrderInput! @spread): Order 
        @can(ability: "update" find: "id") 
        @update

    deleteOrder(id: ID! @rules(apply: ["required"])): Order 
        @can(ability: "delete" find: "id") 
        @delete
}

input UpdateOrderInput {
    id: ID!
    token: String!
    customers: [UpdateCustomerRelation]
    products: SyncProductsRelation
    orderStatus: connectOrderStatusRelation
    discount_percentage: Float
    extra_information: String
    paid: Boolean
    currency: String!
}

input CreateOrderInput {
    customers: [UpdateCustomerRelation]!
    products: SyncProductsRelation!
    extra_information: String
    paid: Boolean
    currency: String!
}

input SyncProductsRelation {
    sync: [SyncProductPivotRelationData!]!
}

input SyncProductPivotRelationData {
    id: ID!
    quantity: Int!
    product_pricing_id: ID
    product_discount_id: ID
}

type Order @modelClass(class: "\\MayIFit\\Extension\\Shop\\Models\\Order") {
    id: ID!
    customers: [Customer] @belongsToMany
    orderStatus: OrderStatus @belongsTo
    token: String!
    placed: DateTime!
    products: [Product!]! @belongsToMany
    quantity: Int!
    net_value: Float!
    gross_value: Float!
    currency: String!
    discount_percentage: Float
    extra_information: String
    paid: Boolean
}