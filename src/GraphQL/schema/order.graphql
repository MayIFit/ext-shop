extend type Query {
  getOrderFromToken(token: String! @eq, reseller_id: ID): Order @find
}

extend type Query @guard(with: ["sanctum"]) {
  listOrder(
    hasReseller: _ @whereHasConditions(columnsEnum: OrderColumns)
    orderBy: _ @orderBy(columnsEnum: OrderColumns)
  ): [Order]!
    @can(ability: "viewAny", model: "MayIFit\\Extension\\Shop\\Models\\Order")
    @paginate(type: "paginator")

  listTransferrableOrder(
    orderBy: _ @orderBy(columnsEnum: OrderColumns)
    hasReseller: _ @whereConditions(columnsEnum: OrderColumns)
  ): [Order]!
    @field(
      resolver: "MayIFit\\Extension\\Shop\\GraphQL\\Queries\\GetTransferrableOrders"
    )
    @can(ability: "viewAny", model: "MayIFit\\Extension\\Shop\\Models\\Order")

  viewOrder(id: ID! @eq): Order! @can(ability: "view", find: "id") @find

  getResellerLastOpenOrder: Order
    @field(
      resolver: "MayIFit\\Extension\\Shop\\GraphQL\\Queries\\GetResellerLastOpenOrder"
    )

  getOrderTrend(range: DateTimeRange @spread): [ObjectScalar]!
    @field(
      resolver: "MayIFit\\Extension\\Shop\\GraphQL\\Queries\\GetOrderTrend"
    )

  getTransferredOrderTrend(range: DateTimeRange @spread): [ObjectScalar]!
    @field(
      resolver: "MayIFit\\Extension\\Shop\\GraphQL\\Queries\\GetOrderTrend@transferredOrders"
    )

  getOrderCount: Int! @count(model: "MayIFit\\Extension\\Shop\\Models\\Order")
}

extend type Mutation {
  createOrder(input: CreateOrderInput! @spread): Order @create
}

extend type Mutation @guard(with: ["sanctum"]) {
  updateOrder(input: UpdateOrderInput! @spread): Order
    @can(ability: "update", find: "id")
    @update

  deleteOrder(id: ID! @rules(apply: ["required"])): Order
    @can(ability: "delete", find: "id")
    @delete

  sendOrderEvent(id: ID!): Order
    @can(ability: "update", find: "id")
    @field(
      resolver: "MayIFit\\Extension\\Shop\\GraphQL\\Mutations\\SendOrderEvent"
    )
}

input CreateOrderInput {
  extra_information: String
  currency: String!
  payment_type: String!
  delivery_type: DeliveryType!
  invoice_number: String
  transport_cost: Float
}

input UpdateOrderInput {
  id: ID!
  token: String
  discount_percentage: Float
  extra_information: String
  paid: Boolean
  currency: String
  payment_type: String
  delivery_type: DeliveryType
  invoice_number: String
  transport_cost: Float
  closed: Boolean
}

type Order @modelClass(class: "MayIFit\\Extension\\Shop\\Models\\Order") {
  id: ID!
  token: String!
  created_at: DateTime!
  "The sum quantity of the ordered Products."
  quantity: Int!
  "The sum quantity of the transferred Products."
  quantity_transferred: Int
  "The sum net value of the ordered Products."
  net_value: Float!
  "The sum gross value of the ordered Products."
  gross_value: Float!
  "The currency of the net and gross values."
  currency: String!
  discount_percentage: Float
  "Extra information for shipping e.g. `Drop a phone call if the courier is here!`."
  extra_information: String
  "Marks the Order as already paid"
  paid: Boolean!
  "Can either be `cod_cash, cod_card or bank_transfer`."
  payment_type: String!
  "The type of the delivery."
  delivery_type: DeliveryType
  invoice_number: String
  "A prefix for the Order, this is used in the external Warehouse system"
  order_id_prefix: String
  "The sum quantity of each distinct product."
  items_ordered: Int
  "The sum quantity of each distinct product what was transferred for shipping."
  items_transferred: Int
  transport_cost: Float
  "Timestamp for when the Order was sent to the Courier Service"
  sent_to_courier_service: DateTime
  closed: Boolean
  "A dynamic field what determines if any Product in the Order is shippable"
  can_be_shipped: Boolean
  full_can_be_shipped: Boolean
  can_be_shipped_text: String
}

input DateTimeRange {
  datetime_from: DateTime!
  datetime_to: DateTime!
}

input DateRange {
  date_from: Date!
  date_to: Date!
}

extend type Reseller
  @modelClass(class: "MayIFit\\Extension\\Shop\\Models\\Reseller") {
  orders(created_at: DateTimeRange @whereBetween): [Order]! @hasMany
}

"A list of filterable columns."
enum OrderColumns {
  ID @enum(value: "id")
  TOKEN @enum(value: "token")
  CREATED_AT @enum(value: "created_at")
  ORDER_ID_PREFIX @enum(value: "order_id_prefix")
  COMPANY_NAME @enum(value: "company_name")
  NET_VALUE @enum(value: "net_value")
  GROSS_VALUE @enum(value: "gross_value")
  QUANTITY @enum(value: "quantity")
  ITEMS_SENT @enum(value: "items_sent")
  ITEMS_ORDERED @enum(value: "items_ordered")
  CLOSED @enum(value: "closed")
  SENT_TO_COURIER_SERVICE @enum(value: "sent_to_courier_service")
  INVOICE_NUMBER @enum(value: "invoice_number")
  CAN_BE_SHIPPED @enum(value: "can_be_shipped")
}

enum DeliveryType {
  PERSONAL_DELIVERY @enum(value: "10")
  HOME_DELIVERY @enum(value: "5")
}
