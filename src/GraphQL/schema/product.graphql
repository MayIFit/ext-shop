extend type Query {
    listProduct(
        name: String @eq 
        in_stock: Boolean @neq(key: "0")
    ): [Product!]! 
    @can(ability: "viewAny" model: "MayIFit\\Extension\\Shop\\Models\\Product") 
    @paginate(type: "paginator")

    viewProduct(
        catalog_id: String! @eq
    ): Product! @can(ability: "view" find: "catalog_id") @find

}

extend type Mutation @guard(with: ["sanctum"]) {
    updateProduct(input: UpdateProductInput! @spread): Product 
        @can(ability: "update" find: "id") 
        @update

    createProduct(input: CreateProductInput! @spread): Product 
        @can(ability: "create" model: "MayIFit\\Extension\\Shop\\Models\\Product") 
        @create

    deleteProduct(id: ID! @rules(apply: ["required"])): Product 
        @can(ability: "delete" find: "id") 
        @delete
}

input UpdateProductInput {
    catalog_id: ID!
    name: String!
    description: String
    technical_specs: ObjectScalar
    net_price: Float
    vat: Float
    in_stock: Int
    out_of_stock_text: String
    discount_percentage: Float
    active: Boolean
}

input CreateProductInput {
    catalog_id: ID!
    name: String!
    description: String
    technical_specs: ObjectScalar
    net_price: Float
    vat: Float
    in_stock: Int
    out_of_stock_text: String
    discount_percentage: Float
    active: Boolean
}

type OrderProductPivot {
    "Ordered quantity of a product"
    quantity: Int!
}

type Product @modelClass(class: "\\MayIFit\\Extension\\Shop\\Models\\Product") {
    catalog_id: ID!
    name: String!
    description: String
    technical_specs: ObjectScalar
    net_price: Float
    vat: Float
    in_stock: Int
    out_of_stock_text: String
    discount_percentage: Float
    active: Boolean
    pivot: OrderProductPivot
}