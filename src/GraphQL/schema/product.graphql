extend type Query {
    listProductWithPricing(
        currency: String!
        dateTime: DateTime!
        category: ID @eq(key: "category_id")
        name: String @eq
    ): [Product]
    @paginate(type: "paginator")

    viewProductWithPricing(
        catalog_id: String! @eq
        dateTime: DateTime!
        currency: String!
    ): Product @find

    cartProducts(
        catalog_id: [String!] @in(key: "catalog_id")
        currency: String!
        dateTime: DateTime!
    ): [Product!]! @all
}

extend type Query @guard(with: ["sanctum"]) {
    listProduct(
        name: String @where(operator: "like")
        catalog_id: String @where(operator: "like")
        in_stock: Boolean @neq(key: "0")
    ): [Product]
    @can(ability: "viewAny" model: "MayIFit\\Extension\\Shop\\Models\\Product") 
    @paginate(type: "paginator")

    viewProduct(
        id: ID! @eq
    ): Product @find
    @can(ability: "view" find: "id") 
}

extend type Mutation @guard(with: ["sanctum"]) {
    updateProduct(input: UpdateProductInput! @spread): Product 
        @can(ability: "update" find: "id") 
        @update

    createProduct(input: CreateProductInput! @spread): Product 
        @can(ability: "create" model: "MayIFit\\Extension\\Shop\\Models\\Product") 
        @create

    deleteProduct(id: ID! @rules(apply: ["required"])): Product 
        @can(ability: "delete" find: "id") 
        @delete
}

input CreateProductInput {
    catalog_id: String!
    name: String
    description: String
    technical_specs: ObjectScalar
    supplied: ObjectScalar
    in_stock: Int
    out_of_stock_text: String
    quantity_unit_text: String
    discount_percentage: Float
    refurbished: Boolean!
    varranty: Int!
    documents: UpdateDocumentHasMany
    pricings: ProductPricingRelation
    category: ProductCategoryRelation
    discounts: ProductDiscountRelation
    parentProduct: UpdateParentProductRelation
}

input UpdateProductInput {
    id: ID!
    catalog_id: String!
    name: String
    description: String
    technical_specs: ObjectScalar
    supplied: ObjectScalar
    in_stock: Int
    out_of_stock_text: String
    quantity_unit_text: String
    discount_percentage: Float
    refurbished: Boolean!
    varranty: Int!
    documents: UpdateDocumentHasMany
    pricings: ProductPricingRelation
    category: ProductCategoryRelation
    discounts: ProductDiscountRelation
    parentProduct: UpdateParentProductRelation
}

input UpdateParentProductRelation {
    connect: ID
}

input UpdateProductRelation {
    connect: ID
}

type OrderProductPivot {
    "Ordered quantity of a product"
    quantity: Int!
}

type Product @modelClass(class: "\\MayIFit\\Extension\\Shop\\Models\\Product") {
    id: ID!
    catalog_id: String!
    name: String!
    description: String
    technical_specs: ObjectScalar
    supplied: ObjectScalar
    in_stock: Int
    out_of_stock_text: String
    quantity_unit_text: String
    refurbished: Boolean!
    varranty: Int!
    reviews: [ProductReview]! @hasMany
    pivot: OrderProductPivot
    pricings: [ProductPricing]! @hasMany
    discounts: [ProductDiscount]! @hasMany
    category: ProductCategory @belongsTo
    accessories: [Product]! @hasMany
    parentProduct: Product @belongsTo
    documents: [Document]! @morphMany
    getPricingForCurrency(currency: String!): ProductPricing
        @method(passordered: true)
    getDiscountForDate(dateTime: DateTime!): ProductDiscount
        @method(passordered: true)
}