extend type Query {
    listOrder: [Order!]! 
    @can(ability: "viewAny" model: "MayIFit\\Extension\\Shop\\Models\\Order") 
    @paginate(type: "paginator")

    getOrderFromToken(token: String!): Order @field(resolver: "GetOrderFromToken@resolve")

    viewOrder(
        catalog_id: String! @eq
    ): Order! @can(ability: "view" find: "catalog_id") @find

}

extend type Mutation @guard(with: ["sanctum"]) {
    updateOrder(input: UpdateOrderInput! @spread): Order 
        @can(ability: "update" find: "id") 
        @update

    createOrder(input: CreateOrderInput! @spread): Order 
        @create

    deleteOrder(id: ID! @rules(apply: ["required"])): Order 
        @can(ability: "delete" find: "id") 
        @delete
}

input UpdateOrderInput {
    id: ID
    order_token: String!
    customer: UpdateCustomerRelation! @spread
    products: syncProductsRelation! @spread
    extra_information: String
    __typename: String
}

input CreateOrderInput {
    customer: UpdateCustomerRelation! @spread
    products: syncProductsRelation! @spread
    extra_information: String
    __typename: String
}

input UpdateCustomerRelation {
    connect: ID
    user: connectCustomerUserRelation @spread
    create: CreateCustomerInput @spread
    __typename: String
}

input connectCustomerUserRelation {
    connect: ID!
}

input syncProductsRelation {
    sync: [syncProductPivotRelationData!]!
    __typename: String
}

input syncProductPivotRelationData {
    id: ID!
    quantity: Int!
}

type Order @modelClass(class: "\\MayIFit\\Extension\\Shop\\Models\\Order") {
    id: ID!
    customer: Customer @BelongsTo
    order_token: String!
    products: [Product!]! @BelongsToMany
    order_volume: Int!
    net_amount: Float!
    amount: Float!
    discount_percentage: Float
    total_amount: Float!
    extra_information: String
}