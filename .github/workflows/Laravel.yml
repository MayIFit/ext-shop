name: Laravel

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REQUIRED_PHP_EXTENSIONS: "mbstring, mysqli, pdo_mysql"
  LIGHTHOUSE_TEST_DB_HOST: "127.0.0.1"
  LIGHTHOUSE_TEST_DB_PASSWORD: "root"

jobs:
  tests:
    name: "Tests"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.1"
          - "7.2"
          - "7.3"
          - "7.4"
        laravel-version:
          - "5.5.*"
          - "5.6.*"
          - "5.7.*"
          - "5.8.*"
          - "^6.0"
          - "^7.0"
        exclude:
          - php-version: "7.1"
            laravel-version: "^6.0"
          - php-version: "7.1"
            laravel-version: "^7.0"
          - php-version: "7.4"
            laravel-version: "5.5.*"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.0.0"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.1.0"
        with:
          coverage: "none"
          extensions: "${{ env.REQUIRED_PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Cache dependencies installed with composer"
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
        uses: "actions/cache@v1.0.3"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.laravel-version }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.laravel-version }}-"

      - name: "Remove conflicting dependencies that are not needed here"
        run: "composer remove --dev nunomaduro/larastan phpstan/phpstan-mockery phpbench/phpbench --no-update"

      - name: "Install dependencies with composer"
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
        run: "composer require illuminate/contracts:${{ matrix.laravel-version }} --no-interaction --prefer-dist --no-interaction --no-suggest"

      - name: "Set up the database"
        run: |
          sudo systemctl start mysql.service
          mysql --user=root --password=root --execute='CREATE DATABASE test;'
      - name: "Run tests with phpunit/phpunit"
        run: "vendor/bin/phpunit --colors=always --verbose"