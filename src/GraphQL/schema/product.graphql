extend type Query {
    listProduct(
        name: String @eq 
        in_stock: Boolean @neq(key: "0")
    ): [Product]
    @paginate(type: "paginator")

    viewProduct(
        catalog_id: String! @eq
    ): Product @find

}

extend type Mutation @guard(with: ["sanctum"]) {
    updateProduct(input: UpsertProductInput! @spread): Product 
        @can(ability: "update" find: "catalog_id") 
        @update

    createProduct(input: UpsertProductInput! @spread): Product 
        @can(ability: "create" model: "MayIFit\\Extension\\Shop\\Models\\Product") 
        @create

    deleteProduct(catalog_id: ID! @rules(apply: ["required"])): Product 
        @can(ability: "delete" find: "catalog_id") 
        @delete
}

input UpsertProductInput {
    catalog_id: ID!
    name: String
    description: String
    technical_specs: ObjectScalar
    net_price: Float
    vat: Float
    in_stock: Int
    out_of_stock_text: String
    quantity_unit_text: String
    parent_product_id: Int
    discount_percentage: Float
    active: Boolean
    documents: UpdateDocumentHasOne
    __typename: String
}

type OrderProductPivot {
    "Ordered quantity of a product"
    quantity: Int!
}

type Product @modelClass(class: "\\MayIFit\\Extension\\Shop\\Models\\Product") {
    catalog_id: ID!
    name: String!
    description: String
    technical_specs: ObjectScalar
    net_price: Float!
    vat: Float!
    in_stock: Int
    out_of_stock_text: String
    quantity_unit_text: String
    parent_product_id: Int
    discount_percentage: Float
    active: Boolean!
    pivot: OrderProductPivot
    documents: [Document]! @morphMany
}